// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DocereeAdsSdk
import AdSupport
import AppTrackingTransparency
import CommonCrypto
@_exported import DocereeAdsSdk
import EventKit
import Foundation
import ImageIO
import JavaScriptCore
import Photos
import SafariServices
import Swift
import SystemConfiguration
import UIKit
import WebKit
import os.log
import os
@objc @_hasMissingDesignatedInitializers final public class Hcp : ObjectiveC.NSObject, Foundation.NSCoding, Swift.Encodable {
  public class HcpBuilder {
    public init()
    public func setFirstName(firstName: Swift.String?) -> DocereeAdsSdk.Hcp.HcpBuilder
    public func setLastName(lastName: Swift.String?) -> DocereeAdsSdk.Hcp.HcpBuilder
    public func setSpecialization(specialization: Swift.String?) -> DocereeAdsSdk.Hcp.HcpBuilder
    public func setGender(gender: Swift.String?) -> DocereeAdsSdk.Hcp.HcpBuilder
    public func setCity(city: Swift.String?) -> DocereeAdsSdk.Hcp.HcpBuilder
    public func setZipCode(zipCode: Swift.String?) -> DocereeAdsSdk.Hcp.HcpBuilder
    public func setEmail(email: Swift.String?) -> DocereeAdsSdk.Hcp.HcpBuilder
    public func setMobile(mobile: Swift.String?) -> DocereeAdsSdk.Hcp.HcpBuilder
    public func setMciRegistrationNumber(mciRegistrationNumber: Swift.String?) -> DocereeAdsSdk.Hcp.HcpBuilder
    public func setNpi(npi: Swift.String?) -> DocereeAdsSdk.Hcp.HcpBuilder
    public func setHashedEmail(hashedEmail: Swift.String?) -> DocereeAdsSdk.Hcp.HcpBuilder
    public func setHashedNPI(hashedNPI: Swift.String?) -> DocereeAdsSdk.Hcp.HcpBuilder
    public func build() -> DocereeAdsSdk.Hcp
    @objc deinit
  }
  @objc final public func encode(with coder: Foundation.NSCoder)
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init()
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class RestManager {
  @objc deinit
}
extension RestManager {
  public struct RestEntity {
  }
  public struct Response {
  }
  public struct Results {
  }
}
extension DocereeAdRequestError : Foundation.LocalizedError {
  public var localizedDescription: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class DocereeMobileAds {
  public static func login(with hcp: DocereeAdsSdk.Hcp)
  final public class func shared() -> DocereeAdsSdk.DocereeMobileAds
  public typealias CompletionHandler = ((Any?) -> Swift.Void)?
  final public func start(completionHandler: DocereeAdsSdk.DocereeMobileAds.CompletionHandler)
  public static func clearUserData()
  @objc deinit
}
public protocol DocereeAdViewDelegate {
  func docereeAdViewDidReceiveAd(_ docereeAdView: DocereeAdsSdk.DocereeAdView)
  func docereeAdView(_ docereeAdView: DocereeAdsSdk.DocereeAdView, didFailToReceiveAdWithError error: DocereeAdsSdk.DocereeAdRequestError)
  func docereeAdViewWillPresentScreen(_ docereeAdView: DocereeAdsSdk.DocereeAdView)
  func docereeAdViewWillDismissScreen(_ docereeAdView: DocereeAdsSdk.DocereeAdView)
  func docereeAdViewDidDismissScreen(_ docereeAdView: DocereeAdsSdk.DocereeAdView)
  func docereeAdViewWillLeaveApplication(_ docereeAdView: DocereeAdsSdk.DocereeAdView)
}
extension DocereeAdViewDelegate {
  public func docereeAdViewDidReceiveAd(_ docereeAdView: DocereeAdsSdk.DocereeAdView)
  public func docereeAdView(_ docereeAdView: DocereeAdsSdk.DocereeAdView, didFailToReceiveAdWithError error: DocereeAdsSdk.DocereeAdRequestError)
  public func docereeAdViewWillPresentScreen(_ docereeAdView: DocereeAdsSdk.DocereeAdView)
  public func docereeAdViewWillDismissScreen(_ docereeAdView: DocereeAdsSdk.DocereeAdView)
  public func docereeAdViewDidDismissScreen(_ docereeAdView: DocereeAdsSdk.DocereeAdView)
  public func docereeAdViewWillLeaveApplication(_ docereeAdView: DocereeAdsSdk.DocereeAdView)
}
public struct Size : Swift.Codable {
  public let width: Swift.Int
  public let height: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct OrientationProperties : Swift.Codable {
  public let allowOrientationChange: Swift.Bool?
  public var forceOrientation: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ResizeProperties : Swift.Codable {
  public let width: Swift.Int?
  public let height: Swift.Int?
  public let offsetX: Swift.Int?
  public let offsetY: Swift.Int?
  public let customClosePosition: Swift.String?
  public let allowOffscreen: Swift.Bool?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ExpandProperties : Swift.Codable {
  public let width: Swift.Int?
  public let height: Swift.Int?
  public let useCustomClose: Swift.Bool?
  public let isModal: Swift.Bool?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Positions {
  public static let TOP_LEFT: Swift.String
  public static let TOP_RIGHT: Swift.String
  public static let TOP_CENTER: Swift.String
  public static let CENTER: Swift.String
  public static let BOTTOM_LEFT: Swift.String
  public static let BOTTOM_CENTER: Swift.String
  public static let BOTTOM_RIGHT: Swift.String
  public static let CENTER_LEFT: Swift.String
  public static let CENTER_RIGHT: Swift.String
}
@objc @_inheritsConvenienceInitializers public class MRAIDBrowserWindow : UIKit.UIViewController, WebKit.WKUIDelegate, WebKit.WKNavigationDelegate {
  public func initialize()
  @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  public func loadUrl(_ url: Swift.String)
  public func onClose(perform: @escaping () -> Swift.Void)
  @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc public func onCloseClicked()
  @objc public func onBackClicked()
  @objc public func onReloadClicked()
  @objc public func onForwardClicked()
  @objc override dynamic public func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MRAIDUtilities {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MRAIDHandler : ObjectiveC.NSObject, WebKit.WKUIDelegate, WebKit.WKNavigationDelegate {
  public var state: Swift.String
  public var orientationProperties: DocereeAdsSdk.OrientationProperties
  public var isInterstitial: Swift.Bool
  public var activeWebView: WebKit.WKWebView!
  public var orientationMaskAll: UIKit.UIInterfaceOrientationMask
  public var orientationMask: UIKit.UIInterfaceOrientationMask!
  public var isExpandedView: Swift.Bool
  public var debug: Swift.Bool
  public func initialize(parentViewController: UIKit.UIViewController, mraidDelegate: DocereeAdsSdk.MRAIDDelegate, isMRAIDCompatible: Swift.Bool)
  @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  public func setMaxSize(_ size: CoreGraphics.CGSize)
  public func setCurrentPosition(_ pos: CoreGraphics.CGRect)
  public func setDefaultPosition(_ pos: CoreGraphics.CGRect)
  public func setIsViewable(_ isViewable: Swift.Bool)
  public func addCloseButton(to: UIKit.UIView, action: ObjectiveC.Selector, showButton: Swift.Bool, position: Swift.String = "top-right")
  public func getExpandProperties() -> DocereeAdsSdk.ExpandProperties?
  public func setMRAIDState(_ state: Swift.String)
  public func setMRAIDSizeChanged(to: CoreGraphics.CGSize)
  public func setMRAIDPlacementType(_ type: Swift.String)
  public func setMRAIDScreenSize(_ size: CoreGraphics.CGSize)
  public func resize()
  public func setResizeProperties(_ args: Swift.String?)
  public func setExpandProperties(_ args: Swift.String?)
  public func Log(_ msg: Swift.String, force: Swift.Bool = false)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DocereeAdView : UIKit.UIView, UIKit.UIApplicationDelegate {
  final public var docereeAdUnitId: Swift.String
  final public var delegate: DocereeAdsSdk.DocereeAdViewDelegate?
  @objc @IBOutlet weak final public var rootViewController: UIKit.UIViewController?
  convenience public init?(with size: Swift.String?)
  convenience public init?(with size: Swift.String?, and origin: CoreGraphics.CGPoint)
  @objc override final public var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  final public func load(_ docereeAdRequest: DocereeAdsSdk.DocereeAdRequest)
  @objc override final public class var requiresConstraintBasedLayout: Swift.Bool {
    @objc get
  }
  final public func safariViewControllerDidFinish(_ controller: SafariServices.SFSafariViewController)
  @objc deinit
  @objc override final public func willMove(toWindow newWindow: UIKit.UIWindow?)
}
extension UIImage {
  public class func gifImageWithData(_ data: Foundation.Data) -> UIKit.UIImage?
  public class func gifImageWithURL(_ gifUrl: Swift.String) -> UIKit.UIImage?
  public class func gifImageWithName(_ name: Swift.String) -> UIKit.UIImage?
}
public protocol MRAIDDelegate {
  func open(_ url: Swift.String)
  func close()
  func expand(_ url: Swift.String?)
  func resize(to: DocereeAdsSdk.ResizeProperties)
  func reportDOMSize(_ args: Swift.String?)
  func webViewLoaded()
}
@objc @_inheritsConvenienceInitializers public class DocereeAdViewRichMediaBanner : UIKit.UIViewController, DocereeAdsSdk.MRAIDDelegate, UIKit.UINavigationControllerDelegate {
  public func initialize(parentViewController: UIKit.UIViewController, position: Swift.String, respectSafeArea: Swift.Bool = false, renderBodyOverride: Swift.Bool, size: DocereeAdsSdk.AdSize, body: Swift.String?, docereeAdView: DocereeAdsSdk.DocereeAdView?, delegate: DocereeAdsSdk.DocereeAdViewDelegate?)
  public func initialize(parentViewController: UIKit.UIViewController, frame: CoreGraphics.CGRect, respectSafeArea: Swift.Bool = false, renderBodyOverride: Swift.Bool, size: DocereeAdsSdk.AdSize, body: Swift.String?, docereeAdView: DocereeAdsSdk.DocereeAdView?, delegate: DocereeAdsSdk.DocereeAdViewDelegate?)
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc deinit
  @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  public func webViewLoaded()
  @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @objc override dynamic public func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  public func reportDOMSize(_ args: Swift.String?)
  public func expand(_ url: Swift.String?)
  public func open(_ url: Swift.String)
  public func resize(to: DocereeAdsSdk.ResizeProperties)
  public func close()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public enum DocereeAdRequestError : Swift.Error {
  case failedToCreateRequest
  public static func == (a: DocereeAdsSdk.DocereeAdRequestError, b: DocereeAdsSdk.DocereeAdRequestError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class DocereeAdRequest {
  public init()
  @objc deinit
}
public protocol AdSize {
  var height: CoreGraphics.CGFloat { get set }
  var width: CoreGraphics.CGFloat { get set }
  func getAdSize() -> CoreGraphics.CGSize
  func getAdSizeName() -> Swift.String
}
extension DocereeAdsSdk.DocereeAdRequestError : Swift.Equatable {}
extension DocereeAdsSdk.DocereeAdRequestError : Swift.Hashable {}
